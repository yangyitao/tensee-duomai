<!DOCTYPE HTML>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="maximum-scale=1.0,minimum-scale=1.0,user-scalable=0,width=device-width,initial-scale=1.0" />
    <meta name="format-detection" content="telephone=no" />
    <title>离职率</title>
    <link href="../../../css/aui.css" rel="stylesheet" />
    <style>
        .aui-nav {
            height: 40px;
        }

            .aui-nav .aui-bar-tab {
                height: 40px;
            }

        .aui-bar-tab li {
            height: 40px;
            line-height: 40px;
        }

        .aui-nav .aui-bar-tab li.active {
            color: #fff;
            background: #16a085;
        }

        .aui-tab-nav {
            font-size: 14px;
            height: 40px;
        }

            .aui-tab-nav li {
                height: 40px;
                line-height: 40px;
            }
    </style>
</head>
<body>
    <div class="aui-tab" id="divTab">
        <ul id="TopBar" class="aui-tab-nav">
            <li data-power="Regional" class="active" data-role="big">大区</li>
            <li data-power="Province" data-role="big">省份</li>
            <li data-power="City" data-role="small">城市</li>
            <li data-power="Area" data-role="small">区域</li>
        </ul>
    </div>
    <div id="main" style="width: 100%; height: 100%;"></div>
    <footer class="aui-nav" id="footer">
        <ul class="aui-bar-tab" id="BottomBar">
            <li data-type="Year" class="active">年度</li>
            <li data-type="Month">月度</li>
        </ul>
    </footer>
</body>
<script src="../../../script/api.js"></script>
<script src="../../../script/zepto.js"></script>
<script src="../../../script/honesty.base.js"></script>
<script src="../../../script/echarts.min.js"></script>
<script type="text/javascript">
    var _Data = null,//大区数据
        _DataProvince = null,//省份数据
        _DataCity = null,//城市数据
        _DataArea = null;//区域数据
    apiready = function () {
        api.parseTapmode();
        $(function () {
            $("#main").height(api.frameHeight - 80);

            if (GetSession("Form_HRPower").toString().indexOf("AllProvince") >= 0) {
                $("[data-role='small']").hide();
            }
            else {
                $("[data-role='big']").hide();
                $("[data-role='small']").each(function () {
                    $("#TopBar").find(".active").removeClass("active");
                    $(this).addClass("active");
                    return false;
                });
            }

            LoadData();

            $("#TopBar").find("li").tap(function () {
                $("#TopBar").find(".active").removeClass("active");
                $(this).addClass("active");
                LoadData();
            });

            $("#BottomBar").find("li").tap(function () {
                $("#BottomBar").find(".active").removeClass("active");
                $(this).addClass("active");
                LoadData();
            });
        });

    }

    function LoadData() {
        if ($("#TopBar").find(".active").data("power") == "Regional") {
            if (_Data == null) {
                var _options = {
                    PostData: {
                        Params: {
                            result: "GetTurnoverRate1"
                        },
                        ProcName: "proc_Index_HRForm",
                        DataType: "DataTable",
                        ExecType: "PROC",
                        Mode: "MSSQL"
                    }
                };
                $.when($honesty.AjaxChannel(_options)).done(function (_result) {
                    if (_result.Code == "1") {
                        if (_result.Data.length > 0) {
                            _Data = _result.Data;
                            ChangeType();
                        }
                    }
                    else {
                        $honesty.CloseWin();
                    }
                });
            }
            else {
                ChangeType();
            }
        }
        else if ($("#TopBar").find(".active").data("power") == "Province") {
            if (_DataProvince == null) {
                var _options = {
                    PostData: {
                        Params: {
                            result: "GetTurnoverRate2",
                            Regional: (GetSession("RoleList").toString().indexOf("EFB111AA-2308-48E2-B1FC-54181EC35E3F") >= 0 ? "" : GetSession("AreaName"))
                        },
                        ProcName: "proc_Index_HRForm",
                        DataType: "DataTable",
                        ExecType: "PROC",
                        Mode: "MSSQL"
                    }
                };
                $.when($honesty.AjaxChannel(_options)).done(function (_result) {
                    if (_result.Code == "1") {
                        if (_result.Data.length > 0) {
                            _DataProvince = _result.Data;
                            ChangeType();
                        }
                    }
                    else {
                        $honesty.CloseWin();
                    }
                });
            }
            else {
                ChangeType();
            }
        }
        else if ($("#TopBar").find(".active").data("power") == "City") {
            if (_DataCity == null) {
                var _options = {
                    PostData: {
                        Params: {
                            result: "GetTurnoverRate3",
                            UserID: GetSession("UserID")
                        },
                        ProcName: "proc_Index_HRForm",
                        DataType: "DataTable",
                        ExecType: "PROC",
                        Mode: "MSSQL"
                    }
                };
                $.when($honesty.AjaxChannel(_options)).done(function (_result) {
                    if (_result.Code == "1") {
                        if (_result.Data.length > 0) {
                            _DataCity = _result.Data;
                            ChangeType();
                        }
                    }
                    else {
                        $honesty.CloseWin();
                    }
                });
            }
            else {
                ChangeType();
            }
        }
        else {
            if (_DataArea == null) {
                var _options = {
                    PostData: {
                        Params: {
                            result: "GetTurnoverRate4",
                            UserID: GetSession("UserID")
                        },
                        ProcName: "proc_Index_HRForm",
                        DataType: "DataTable",
                        ExecType: "PROC",
                        Mode: "MSSQL"
                    }
                };
                $.when($honesty.AjaxChannel(_options)).done(function (_result) {
                    if (_result.Code == "1") {
                        if (_result.Data.length > 0) {
                            _DataArea = _result.Data;
                            ChangeType();
                        }
                    }
                    else {
                        $honesty.CloseWin();
                    }
                });
            }
            else {
                ChangeType();
            }
        }
    }

    function ChangeType() {
        var _default = {};
        var _Power = $("#TopBar").find(".active").data("power");
        var _Type = $("#BottomBar").find(".active").data("type");

        var arrCategory = new Array();
        var arrLegend = new Array();
        var arrData = new Array();
        var arrSeries = new Array();
        var minMonth = 12, maxMonth = 1;
        switch (_Power) {
            case "Regional":
                if (_Type == "Year") {
                    arrLegend.push("整体");
                    arrSeries.push({ name: "整体", type: "bar", label: { normal: { show: true, position: "top", formatter: '{c}%', textStyle: { color: "#000" } } }, data: [] });
                    $.each(_Data, function (i, item) {
                        if ($.inArray(item.Regional, arrCategory) < 0) {
                            arrCategory.push(item.Regional);
                        }
                        if ($.inArray(item.Title, arrLegend) < 0) {
                            arrLegend.push(item.Title);
                            arrSeries.push({ name: item.Title, type: "bar", label: { normal: { show: true, position: "top", formatter: '{c}%', textStyle: { color: "#000" } } }, data: [] });
                        }
                        if (minMonth > Number(item.ZMonth)) {
                            minMonth = Number(item.ZMonth);
                        }
                        if (maxMonth < Number(item.ZMonth)) {
                            maxMonth = Number(item.ZMonth);
                        }
                    });

                    for (var i = 0; i < arrSeries.length; i++) {
                        for (var j = 0; j < arrCategory.length; j++) {
                            arrSeries[i].data.push({ minMonth: minMonth, beginEmpNum: 0, inNum: 0, leaveNum: 0, value: 0 });
                        }
                    }

                    $.each(_Data, function (i, item) {
                        var _index = $.inArray(item.Regional, arrCategory);

                        for (var i = 0; i < arrSeries.length; i++) {
                            if (arrSeries[i].name == item.Title) {
                                if (arrSeries[i].data[_index].minMonth == Number(item.ZMonth)) {
                                    arrSeries[i].data[_index].beginEmpNum = Number(item.BeginEmpNum);
                                    arrSeries[0].data[_index].beginEmpNum = Number(arrSeries[0].data[_index].beginEmpNum) + Number(item.BeginEmpNum);
                                }
                                arrSeries[i].data[_index].inNum = Number(arrSeries[i].data[_index].inNum) + Number(item.InNum);
                                arrSeries[i].data[_index].leaveNum = Number(arrSeries[i].data[_index].leaveNum) + Number(item.LeaveNum);
                                arrSeries[0].data[_index].inNum = Number(arrSeries[0].data[_index].inNum) + Number(item.InNum);
                                arrSeries[0].data[_index].leaveNum = Number(arrSeries[0].data[_index].leaveNum) + Number(item.LeaveNum);
                            }
                        }
                    });
                    for (var i = 0; i < arrSeries.length; i++) {
                        for (j = 0; j < arrSeries[i].data.length; j++) {
                            arrSeries[i].data[j].value = (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum) == 0 ? 0 :
                                (Number(arrSeries[i].data[j].leaveNum) / (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum)) * 100).toFixed(1))
                        }
                    }

                    _default = {
                        color: ['rgb(197,59,56)', 'rgb(120,86,123)', 'rgb(52,172,204)', 'rgb(176,70,0)', 'rgb(28,67,115)',
                               'rgb(221,139,69)', '#9BCA63', '#FAD860', '#F3A43B', '#60C0DD',
                               '#D7504B', '#C6E579', '#F4E001', '#F0805A', '#26C0C0'],
                        tooltip: {
                            trigger: 'axis', axisPointer: { type: 'shadow' }, textStyle: { fontSize: 12 }, formatter: '{b}<br>{a}离职率:{c}%'
                        },
                        legend: { data: arrLegend, textStyle: { fontSize: 12 }, selectedMode: 'single', bottom: 1, itemGap: 5 },
                        grid: { left: '1%', right: '1%', bottom: '60', top: '15', containLabel: true },
                        xAxis: { type: 'category', data: arrCategory },
                        yAxis: { type: 'value', axisLabel: { formatter: '{value} %' } },
                        series: arrSeries
                    };
                }
                else {
                    arrLegend.push("整体");
                    arrSeries.push({ name: "整体", type: "bar", label: { normal: { show: true, position: "top", formatter: '{c}%', textStyle: { color: "#000" } } }, data: [] });
                    $.each(_Data, function (i, item) {
                        if ($.inArray(item.Regional, arrCategory) < 0) {
                            arrCategory.push(item.Regional);
                        }
                        if ($.inArray(item.Title, arrLegend) < 0) {
                            arrLegend.push(item.Title);
                            arrSeries.push({ name: item.Title, type: "bar", label: { normal: { show: true, position: "top", formatter: '{c}%', textStyle: { color: "#000" } } }, data: [] });
                        }
                        if (maxMonth < Number(item.ZMonth)) {
                            maxMonth = Number(item.ZMonth);
                        }
                    });

                    for (var i = 0; i < arrSeries.length; i++) {
                        for (var j = 0; j < arrCategory.length; j++) {
                            arrSeries[i].data.push({ beginEmpNum: 0, inNum: 0, leaveNum: 0, value: 0 });
                        }
                    }

                    $.each(_Data, function (i, item) {
                        if (Number(item.ZMonth) == maxMonth) {
                            var _index = $.inArray(item.Regional, arrCategory);
                            for (var i = 0; i < arrSeries.length; i++) {
                                if (arrSeries[i].name == item.Title) {
                                    arrSeries[i].data[_index].beginEmpNum = Number(item.BeginEmpNum);
                                    arrSeries[0].data[_index].beginEmpNum = Number(arrSeries[0].data[_index].beginEmpNum) + Number(item.BeginEmpNum);
                                    arrSeries[i].data[_index].inNum = Number(arrSeries[i].data[_index].inNum) + Number(item.InNum);
                                    arrSeries[i].data[_index].leaveNum = Number(arrSeries[i].data[_index].leaveNum) + Number(item.LeaveNum);
                                    arrSeries[0].data[_index].inNum = Number(arrSeries[0].data[_index].inNum) + Number(item.InNum);
                                    arrSeries[0].data[_index].leaveNum = Number(arrSeries[0].data[_index].leaveNum) + Number(item.LeaveNum);
                                }
                            }
                        }
                    });
                    for (var i = 0; i < arrSeries.length; i++) {
                        for (j = 0; j < arrSeries[i].data.length; j++) {
                            arrSeries[i].data[j].value = (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum) == 0 ? 0 :
                                (Number(arrSeries[i].data[j].leaveNum) / (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum)) * 100).toFixed(1))
                        }
                    }

                    _default = {
                        color: ['rgb(197,59,56)', 'rgb(120,86,123)', 'rgb(52,172,204)', 'rgb(176,70,0)', 'rgb(28,67,115)',
                               'rgb(221,139,69)', '#9BCA63', '#FAD860', '#F3A43B', '#60C0DD',
                               '#D7504B', '#C6E579', '#F4E001', '#F0805A', '#26C0C0'],
                        tooltip: {
                            trigger: 'axis', axisPointer: { type: 'shadow' }, textStyle: { fontSize: 12 }, formatter: '{b}<br>{a}离职率:{c}%'
                        },
                        legend: { data: arrLegend, textStyle: { fontSize: 12 }, selectedMode: 'single', bottom: 1, itemGap: 5 },
                        grid: { left: '1%', right: '1%', bottom: '60', top: '15', containLabel: true },
                        xAxis: { type: 'category', data: arrCategory },
                        yAxis: { type: 'value', axisLabel: { formatter: '{value} %' } },
                        series: arrSeries
                    };
                }
                break;
            case "Province":
                if (_Type == "Year") {
                    arrLegend.push("整体");
                    arrSeries.push({ name: "整体", type: "bar", label: { normal: { show: true, position: "insideRight", formatter: '{c}%', textStyle: { color: "#fff" } } }, data: [] });
                    $.each(_DataProvince, function (i, item) {
                        if ($.inArray(item.Province, arrCategory) < 0) {
                            arrCategory.push(item.Province);
                        }
                        if ($.inArray(item.Title, arrLegend) < 0) {
                            arrLegend.push(item.Title);
                            arrSeries.push({ name: item.Title, type: "bar", label: { normal: { show: true, position: "insideRight", formatter: '{c}%', textStyle: { color: "#fff" } } }, data: [] });
                        }
                        if (minMonth > Number(item.ZMonth)) {
                            minMonth = Number(item.ZMonth);
                        }
                        if (maxMonth < Number(item.ZMonth)) {
                            maxMonth = Number(item.ZMonth);
                        }
                    });

                    for (var i = 0; i < arrSeries.length; i++) {
                        for (var j = 0; j < arrCategory.length; j++) {
                            arrSeries[i].data.push({ minMonth: minMonth, beginEmpNum: 0, inNum: 0, leaveNum: 0, value: 0 });
                        }
                    }

                    $.each(_DataProvince, function (i, item) {
                        var _index = $.inArray(item.Province, arrCategory);

                        for (var i = 0; i < arrSeries.length; i++) {
                            if (arrSeries[i].name == item.Title) {
                                if (arrSeries[i].data[_index].minMonth == Number(item.ZMonth)) {
                                    arrSeries[i].data[_index].beginEmpNum = Number(item.BeginEmpNum);
                                    arrSeries[0].data[_index].beginEmpNum = Number(arrSeries[0].data[_index].beginEmpNum) + Number(item.BeginEmpNum);
                                }
                                arrSeries[i].data[_index].inNum = Number(arrSeries[i].data[_index].inNum) + Number(item.InNum);
                                arrSeries[i].data[_index].leaveNum = Number(arrSeries[i].data[_index].leaveNum) + Number(item.LeaveNum);
                                arrSeries[0].data[_index].inNum = Number(arrSeries[0].data[_index].inNum) + Number(item.InNum);
                                arrSeries[0].data[_index].leaveNum = Number(arrSeries[0].data[_index].leaveNum) + Number(item.LeaveNum);
                            }
                        }
                    });
                    for (var i = 0; i < arrSeries.length; i++) {
                        for (j = 0; j < arrSeries[i].data.length; j++) {
                            arrSeries[i].data[j].value = (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum) == 0 ? 0 :
                                (Number(arrSeries[i].data[j].leaveNum) / (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum)) * 100).toFixed(1))
                        }
                    }

                    _default = {
                        color: ['rgb(197,59,56)', 'rgb(120,86,123)', 'rgb(52,172,204)', 'rgb(176,70,0)', 'rgb(28,67,115)',
                               'rgb(221,139,69)', '#9BCA63', '#FAD860', '#F3A43B', '#60C0DD',
                               '#D7504B', '#C6E579', '#F4E001', '#F0805A', '#26C0C0'],
                        tooltip: {
                            trigger: 'axis', axisPointer: { type: 'shadow' }, textStyle: { fontSize: 12 }, formatter: '{b}<br>{a}离职率:{c}%'
                        },
                        legend: { data: arrLegend, textStyle: { fontSize: 12 }, selectedMode: 'single', bottom: 1, itemGap: 5 },
                        grid: { left: '1%', right: '3%', bottom: '60', top: '15', containLabel: true },
                        yAxis: { type: 'category', data: arrCategory },
                        xAxis: { type: 'value', axisLabel: { formatter: '{value} %' }, axisLabel: { interval: 0 } },
                        series: arrSeries
                    };

                    if (arrCategory.length <= 6) {
                        _default.xAxis = { type: 'category', data: arrCategory };
                        _default.yAxis = { type: 'value', axisLabel: { formatter: '{value} %' }, axisLabel: { interval: 0 } };
                        for (var i = 0; i < _default.series.length; i++) {
                            _default.series[i].label.normal.position = "top";
                            _default.series[i].label.normal.textStyle.color = "#000"
                        }
                    }
                }
                else {
                    arrLegend.push("整体");
                    arrSeries.push({ name: "整体", type: "bar", label: { normal: { show: true, position: "insideRight", formatter: '{c}%', textStyle: { color: "#fff" } } }, data: [] });
                    $.each(_DataProvince, function (i, item) {
                        if ($.inArray(item.Province, arrCategory) < 0) {
                            arrCategory.push(item.Province);
                        }
                        if ($.inArray(item.Title, arrLegend) < 0) {
                            arrLegend.push(item.Title);
                            arrSeries.push({ name: item.Title, type: "bar", label: { normal: { show: true, position: "insideRight", formatter: '{c}%', textStyle: { color: "#fff" } } }, data: [] });
                        }
                        if (maxMonth < Number(item.ZMonth)) {
                            maxMonth = Number(item.ZMonth);
                        }
                    });

                    for (var i = 0; i < arrSeries.length; i++) {
                        for (var j = 0; j < arrCategory.length; j++) {
                            arrSeries[i].data.push({ beginEmpNum: 0, inNum: 0, leaveNum: 0, value: 0 });
                        }
                    }

                    $.each(_DataProvince, function (i, item) {
                        if (Number(item.ZMonth) == maxMonth) {
                            var _index = $.inArray(item.Province, arrCategory);
                            for (var i = 0; i < arrSeries.length; i++) {
                                if (arrSeries[i].name == item.Title) {
                                    arrSeries[i].data[_index].beginEmpNum = Number(item.BeginEmpNum);
                                    arrSeries[0].data[_index].beginEmpNum = Number(arrSeries[0].data[_index].beginEmpNum) + Number(item.BeginEmpNum);
                                    arrSeries[i].data[_index].inNum = Number(arrSeries[i].data[_index].inNum) + Number(item.InNum);
                                    arrSeries[i].data[_index].leaveNum = Number(arrSeries[i].data[_index].leaveNum) + Number(item.LeaveNum);
                                    arrSeries[0].data[_index].inNum = Number(arrSeries[0].data[_index].inNum) + Number(item.InNum);
                                    arrSeries[0].data[_index].leaveNum = Number(arrSeries[0].data[_index].leaveNum) + Number(item.LeaveNum);
                                }
                            }
                        }
                    });
                    for (var i = 0; i < arrSeries.length; i++) {
                        for (j = 0; j < arrSeries[i].data.length; j++) {
                            arrSeries[i].data[j].value = (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum) == 0 ? 0 :
                                (Number(arrSeries[i].data[j].leaveNum) / (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum)) * 100).toFixed(1))
                        }
                    }

                    _default = {
                        color: ['rgb(197,59,56)', 'rgb(120,86,123)', 'rgb(52,172,204)', 'rgb(176,70,0)', 'rgb(28,67,115)',
                               'rgb(221,139,69)', '#9BCA63', '#FAD860', '#F3A43B', '#60C0DD',
                               '#D7504B', '#C6E579', '#F4E001', '#F0805A', '#26C0C0'],
                        tooltip: {
                            trigger: 'axis', axisPointer: { type: 'shadow' }, textStyle: { fontSize: 12 }, formatter: '{b}<br>{a}离职率:{c}%'
                        },
                        legend: { data: arrLegend, textStyle: { fontSize: 12 }, selectedMode: 'single', bottom: 1, itemGap: 5 },
                        grid: { left: '1%', right: '1%', bottom: '60', top: '15', containLabel: true },
                        yAxis: { type: 'category', data: arrCategory, axisLabel: { interval: 0 } },
                        xAxis: { type: 'value', axisLabel: { formatter: '{value} %' } },
                        series: arrSeries
                    };
                    if (arrCategory.length <= 6) {
                        _default.xAxis = { type: 'category', data: arrCategory };
                        _default.yAxis = { type: 'value', axisLabel: { formatter: '{value} %' }, axisLabel: { interval: 0 } };
                        for (var i = 0; i < _default.series.length; i++) {
                            _default.series[i].label.normal.position = "top";
                            _default.series[i].label.normal.textStyle.color = "#000"
                        }
                    }
                }
                break;
            case "City":
                if (_Type == "Year") {
                    arrLegend.push("整体");
                    arrSeries.push({ name: "整体", type: "bar", label: { normal: { show: true, position: "insideRight", formatter: '{c}%', textStyle: { color: "#fff" } } }, data: [] });
                    $.each(_DataCity, function (i, item) {
                        if ($.inArray(item.City, arrCategory) < 0) {
                            arrCategory.push(item.City);
                        }
                        if ($.inArray(item.Title, arrLegend) < 0) {
                            arrLegend.push(item.Title);
                            arrSeries.push({ name: item.Title, type: "bar", label: { normal: { show: true, position: "insideRight", formatter: '{c}%', textStyle: { color: "#fff" } } }, data: [] });
                        }
                        if (minMonth > Number(item.ZMonth)) {
                            minMonth = Number(item.ZMonth);
                        }
                        if (maxMonth < Number(item.ZMonth)) {
                            maxMonth = Number(item.ZMonth);
                        }
                    });

                    for (var i = 0; i < arrSeries.length; i++) {
                        for (var j = 0; j < arrCategory.length; j++) {
                            arrSeries[i].data.push({ minMonth: minMonth, beginEmpNum: 0, inNum: 0, leaveNum: 0, value: 0 });
                        }
                    }

                    $.each(_DataCity, function (i, item) {
                        var _index = $.inArray(item.City, arrCategory);

                        for (var i = 0; i < arrSeries.length; i++) {
                            if (arrSeries[i].name == item.Title) {
                                if (arrSeries[i].data[_index].minMonth == Number(item.ZMonth)) {
                                    arrSeries[i].data[_index].beginEmpNum = Number(item.BeginEmpNum);
                                    arrSeries[0].data[_index].beginEmpNum = Number(arrSeries[0].data[_index].beginEmpNum) + Number(item.BeginEmpNum);
                                }
                                arrSeries[i].data[_index].inNum = Number(arrSeries[i].data[_index].inNum) + Number(item.InNum);
                                arrSeries[i].data[_index].leaveNum = Number(arrSeries[i].data[_index].leaveNum) + Number(item.LeaveNum);
                                arrSeries[0].data[_index].inNum = Number(arrSeries[0].data[_index].inNum) + Number(item.InNum);
                                arrSeries[0].data[_index].leaveNum = Number(arrSeries[0].data[_index].leaveNum) + Number(item.LeaveNum);
                            }
                        }
                    });
                    for (var i = 0; i < arrSeries.length; i++) {
                        for (j = 0; j < arrSeries[i].data.length; j++) {
                            arrSeries[i].data[j].value = (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum) == 0 ? 0 :
                                (Number(arrSeries[i].data[j].leaveNum) / (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum)) * 100).toFixed(1))
                        }
                    }

                    _default = {
                        color: ['rgb(197,59,56)', 'rgb(120,86,123)', 'rgb(52,172,204)', 'rgb(176,70,0)', 'rgb(28,67,115)',
                               'rgb(221,139,69)', '#9BCA63', '#FAD860', '#F3A43B', '#60C0DD',
                               '#D7504B', '#C6E579', '#F4E001', '#F0805A', '#26C0C0'],
                        tooltip: {
                            trigger: 'axis', axisPointer: { type: 'shadow' }, textStyle: { fontSize: 12 }, formatter: '{b}<br>{a}离职率:{c}%'
                        },
                        legend: { data: arrLegend, textStyle: { fontSize: 12 }, selectedMode: 'single', bottom: 1, itemGap: 5 },
                        grid: { left: '1%', right: '3%', bottom: '60', top: '15', containLabel: true },
                        yAxis: { type: 'category', data: arrCategory },
                        xAxis: { type: 'value', axisLabel: { formatter: '{value} %' }, axisLabel: { interval: 0 } },
                        series: arrSeries
                    };

                    if (arrCategory.length <= 6) {
                        _default.xAxis = { type: 'category', data: arrCategory };
                        _default.yAxis = { type: 'value', axisLabel: { formatter: '{value} %' }, axisLabel: { interval: 0 } };
                        for (var i = 0; i < _default.series.length; i++) {
                            _default.series[i].label.normal.position = "top";
                            _default.series[i].label.normal.textStyle.color = "#000"
                        }
                    }
                }
                else {
                    arrLegend.push("整体");
                    arrSeries.push({ name: "整体", type: "bar", label: { normal: { show: true, position: "insideRight", formatter: '{c}%', textStyle: { color: "#fff" } } }, data: [] });
                    $.each(_DataCity, function (i, item) {
                        if ($.inArray(item.City, arrCategory) < 0) {
                            arrCategory.push(item.City);
                        }
                        if ($.inArray(item.Title, arrLegend) < 0) {
                            arrLegend.push(item.Title);
                            arrSeries.push({ name: item.Title, type: "bar", label: { normal: { show: true, position: "insideRight", formatter: '{c}%', textStyle: { color: "#fff" } } }, data: [] });
                        }
                        if (maxMonth < Number(item.ZMonth)) {
                            maxMonth = Number(item.ZMonth);
                        }
                    });

                    for (var i = 0; i < arrSeries.length; i++) {
                        for (var j = 0; j < arrCategory.length; j++) {
                            arrSeries[i].data.push({ beginEmpNum: 0, inNum: 0, leaveNum: 0, value: 0 });
                        }
                    }

                    $.each(_DataCity, function (i, item) {
                        if (Number(item.ZMonth) == maxMonth) {
                            var _index = $.inArray(item.City, arrCategory);
                            for (var i = 0; i < arrSeries.length; i++) {
                                if (arrSeries[i].name == item.Title) {
                                    arrSeries[i].data[_index].beginEmpNum = Number(item.BeginEmpNum);
                                    arrSeries[0].data[_index].beginEmpNum = Number(arrSeries[0].data[_index].beginEmpNum) + Number(item.BeginEmpNum);
                                    arrSeries[i].data[_index].inNum = Number(arrSeries[i].data[_index].inNum) + Number(item.InNum);
                                    arrSeries[i].data[_index].leaveNum = Number(arrSeries[i].data[_index].leaveNum) + Number(item.LeaveNum);
                                    arrSeries[0].data[_index].inNum = Number(arrSeries[0].data[_index].inNum) + Number(item.InNum);
                                    arrSeries[0].data[_index].leaveNum = Number(arrSeries[0].data[_index].leaveNum) + Number(item.LeaveNum);
                                }
                            }
                        }
                    });
                    for (var i = 0; i < arrSeries.length; i++) {
                        for (j = 0; j < arrSeries[i].data.length; j++) {
                            arrSeries[i].data[j].value = (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum) == 0 ? 0 :
                                (Number(arrSeries[i].data[j].leaveNum) / (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum)) * 100).toFixed(1))
                        }
                    }

                    _default = {
                        color: ['rgb(197,59,56)', 'rgb(120,86,123)', 'rgb(52,172,204)', 'rgb(176,70,0)', 'rgb(28,67,115)',
                               'rgb(221,139,69)', '#9BCA63', '#FAD860', '#F3A43B', '#60C0DD',
                               '#D7504B', '#C6E579', '#F4E001', '#F0805A', '#26C0C0'],
                        tooltip: {
                            trigger: 'axis', axisPointer: { type: 'shadow' }, textStyle: { fontSize: 12 }, formatter: '{b}<br>{a}离职率:{c}%'
                        },
                        legend: { data: arrLegend, textStyle: { fontSize: 12 }, selectedMode: 'single', bottom: 1, itemGap: 5 },
                        grid: { left: '1%', right: '1%', bottom: '60', top: '15', containLabel: true },
                        yAxis: { type: 'category', data: arrCategory, axisLabel: { interval: 0 } },
                        xAxis: { type: 'value', axisLabel: { formatter: '{value} %' } },
                        series: arrSeries
                    };
                    if (arrCategory.length <= 6) {
                        _default.xAxis = { type: 'category', data: arrCategory };
                        _default.yAxis = { type: 'value', axisLabel: { formatter: '{value} %' }, axisLabel: { interval: 0 } };
                        for (var i = 0; i < _default.series.length; i++) {
                            _default.series[i].label.normal.position = "top";
                            _default.series[i].label.normal.textStyle.color = "#000"
                        }
                    }
                }
                break;
            case "Area":
                if (_Type == "Year") {
                    arrLegend.push("整体");
                    arrSeries.push({ name: "整体", type: "bar", label: { normal: { show: true, position: "insideRight", formatter: '{c}%', textStyle: { color: "#fff" } } }, data: [] });
                    $.each(_DataArea, function (i, item) {
                        if ($.inArray(item.Name, arrCategory) < 0) {
                            arrCategory.push(item.Name);
                        }
                        if ($.inArray(item.Title, arrLegend) < 0) {
                            arrLegend.push(item.Title);
                            arrSeries.push({ name: item.Title, type: "bar", label: { normal: { show: true, position: "insideRight", formatter: '{c}%', textStyle: { color: "#fff" } } }, data: [] });
                        }
                        if (minMonth > Number(item.ZMonth)) {
                            minMonth = Number(item.ZMonth);
                        }
                        if (maxMonth < Number(item.ZMonth)) {
                            maxMonth = Number(item.ZMonth);
                        }
                    });

                    for (var i = 0; i < arrSeries.length; i++) {
                        for (var j = 0; j < arrCategory.length; j++) {
                            arrSeries[i].data.push({ minMonth: minMonth, beginEmpNum: 0, inNum: 0, leaveNum: 0, value: 0 });
                        }
                    }

                    $.each(_DataArea, function (i, item) {
                        var _index = $.inArray(item.Name, arrCategory);

                        for (var i = 0; i < arrSeries.length; i++) {
                            if (arrSeries[i].name == item.Title) {
                                if (arrSeries[i].data[_index].minMonth == Number(item.ZMonth)) {
                                    arrSeries[i].data[_index].beginEmpNum = Number(item.BeginEmpNum);
                                    arrSeries[0].data[_index].beginEmpNum = Number(arrSeries[0].data[_index].beginEmpNum) + Number(item.BeginEmpNum);
                                }
                                arrSeries[i].data[_index].inNum = Number(arrSeries[i].data[_index].inNum) + Number(item.InNum);
                                arrSeries[i].data[_index].leaveNum = Number(arrSeries[i].data[_index].leaveNum) + Number(item.LeaveNum);
                                arrSeries[0].data[_index].inNum = Number(arrSeries[0].data[_index].inNum) + Number(item.InNum);
                                arrSeries[0].data[_index].leaveNum = Number(arrSeries[0].data[_index].leaveNum) + Number(item.LeaveNum);
                            }
                        }
                    });
                    for (var i = 0; i < arrSeries.length; i++) {
                        for (j = 0; j < arrSeries[i].data.length; j++) {
                            arrSeries[i].data[j].value = (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum) == 0 ? 0 :
                                (Number(arrSeries[i].data[j].leaveNum) / (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum)) * 100).toFixed(1))
                        }
                    }

                    _default = {
                        color: ['rgb(197,59,56)', 'rgb(120,86,123)', 'rgb(52,172,204)', 'rgb(176,70,0)', 'rgb(28,67,115)',
                               'rgb(221,139,69)', '#9BCA63', '#FAD860', '#F3A43B', '#60C0DD',
                               '#D7504B', '#C6E579', '#F4E001', '#F0805A', '#26C0C0'],
                        tooltip: {
                            trigger: 'axis', axisPointer: { type: 'shadow' }, textStyle: { fontSize: 12 }, formatter: '{b}<br>{a}离职率:{c}%'
                        },
                        legend: { data: arrLegend, textStyle: { fontSize: 12 }, selectedMode: 'single', bottom: 1, itemGap: 5 },
                        grid: { left: '1%', right: '3%', bottom: '60', top: '15', containLabel: true },
                        yAxis: { type: 'category', data: arrCategory },
                        xAxis: { type: 'value', axisLabel: { formatter: '{value} %' }, axisLabel: { interval: 0 } },
                        series: arrSeries
                    };

                    if (arrCategory.length <= 6) {
                        _default.xAxis = { type: 'category', data: arrCategory };
                        _default.yAxis = { type: 'value', axisLabel: { formatter: '{value} %' }, axisLabel: { interval: 0 } };
                        for (var i = 0; i < _default.series.length; i++) {
                            _default.series[i].label.normal.position = "top";
                            _default.series[i].label.normal.textStyle.color = "#000"
                        }
                    }
                }
                else {
                    arrLegend.push("整体");
                    arrSeries.push({ name: "整体", type: "bar", label: { normal: { show: true, position: "insideRight", formatter: '{c}%', textStyle: { color: "#fff" } } }, data: [] });
                    $.each(_DataArea, function (i, item) {
                        if ($.inArray(item.Name, arrCategory) < 0) {
                            arrCategory.push(item.Name);
                        }
                        if ($.inArray(item.Title, arrLegend) < 0) {
                            arrLegend.push(item.Title);
                            arrSeries.push({ name: item.Title, type: "bar", label: { normal: { show: true, position: "insideRight", formatter: '{c}%', textStyle: { color: "#fff" } } }, data: [] });
                        }
                        if (maxMonth < Number(item.ZMonth)) {
                            maxMonth = Number(item.ZMonth);
                        }
                    });

                    for (var i = 0; i < arrSeries.length; i++) {
                        for (var j = 0; j < arrCategory.length; j++) {
                            arrSeries[i].data.push({ beginEmpNum: 0, inNum: 0, leaveNum: 0, value: 0 });
                        }
                    }

                    $.each(_DataArea, function (i, item) {
                        if (Number(item.ZMonth) == maxMonth) {
                            var _index = $.inArray(item.Name, arrCategory);
                            for (var i = 0; i < arrSeries.length; i++) {
                                if (arrSeries[i].name == item.Title) {
                                    arrSeries[i].data[_index].beginEmpNum = Number(item.BeginEmpNum);
                                    arrSeries[0].data[_index].beginEmpNum = Number(arrSeries[0].data[_index].beginEmpNum) + Number(item.BeginEmpNum);
                                    arrSeries[i].data[_index].inNum = Number(arrSeries[i].data[_index].inNum) + Number(item.InNum);
                                    arrSeries[i].data[_index].leaveNum = Number(arrSeries[i].data[_index].leaveNum) + Number(item.LeaveNum);
                                    arrSeries[0].data[_index].inNum = Number(arrSeries[0].data[_index].inNum) + Number(item.InNum);
                                    arrSeries[0].data[_index].leaveNum = Number(arrSeries[0].data[_index].leaveNum) + Number(item.LeaveNum);
                                }
                            }
                        }
                    });
                    for (var i = 0; i < arrSeries.length; i++) {
                        for (j = 0; j < arrSeries[i].data.length; j++) {
                            arrSeries[i].data[j].value = (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum) == 0 ? 0 :
                                (Number(arrSeries[i].data[j].leaveNum) / (Number(arrSeries[i].data[j].beginEmpNum) + Number(arrSeries[i].data[j].inNum)) * 100).toFixed(1))
                        }
                    }

                    _default = {
                        color: ['rgb(197,59,56)', 'rgb(120,86,123)', 'rgb(52,172,204)', 'rgb(176,70,0)', 'rgb(28,67,115)',
                               'rgb(221,139,69)', '#9BCA63', '#FAD860', '#F3A43B', '#60C0DD',
                               '#D7504B', '#C6E579', '#F4E001', '#F0805A', '#26C0C0'],
                        tooltip: {
                            trigger: 'axis', axisPointer: { type: 'shadow' }, textStyle: { fontSize: 12 }, formatter: '{b}<br>{a}离职率:{c}%'
                        },
                        legend: { data: arrLegend, textStyle: { fontSize: 12 }, selectedMode: 'single', bottom: 1, itemGap: 5 },
                        grid: { left: '1%', right: '1%', bottom: '60', top: '15', containLabel: true },
                        yAxis: { type: 'category', data: arrCategory, axisLabel: { interval: 0 } },
                        xAxis: { type: 'value', axisLabel: { formatter: '{value} %' } },
                        series: arrSeries
                    };
                    if (arrCategory.length <= 6) {
                        _default.xAxis = { type: 'category', data: arrCategory };
                        _default.yAxis = { type: 'value', axisLabel: { formatter: '{value} %' }, axisLabel: { interval: 0 } };
                        for (var i = 0; i < _default.series.length; i++) {
                            _default.series[i].label.normal.position = "top";
                            _default.series[i].label.normal.textStyle.color = "#000"
                        }
                    }
                }
                break;
            default:

        }

        // 基于准备好的dom，初始化echarts实例
        myChart = echarts.init(document.getElementById('main'));
        myChart.setOption(_default);
    }
</script>
</html>
